{"ast":null,"code":"var _jsxFileName = \"/Users/jesusramirez/ReactJs/tuwebco/src/App.jsx\",\n    _s = $RefreshSig$();\n\n//import React from 'react';\nimport React, { Fragment, useState, useRef } from 'react'; // x cada cambio fuerza re renderizado\n\nimport { v4 as uuidv4 } from 'uuid';\nimport { TodoList } from './componente/TodoList';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst KEY = \"todoApp.todos\"; // https://es.reactjs.org/docs/hooks-state.html\n// ¿Qué pasamos a useState como argumento? El único argumento para el Hook useState() es el estado inicial. Al contrario que en las clases, el estado no tiene por qué ser un objeto. Podemos usar números o strings si es todo lo que necesitamos. En nuestro ejemplo, solamente queremos un número para contar el número de clicks del usuario, por eso pasamos 0 como estado inicial a nuestra variable. (Si queremos guardar dos valores distintos en el estado, llamaríamos a useState() dos veces).\n// ¿Qué devuelve useState? Devuelve una pareja de valores: el estado actual y una función que lo actualiza. Por eso escribimos const [count, setCount] = useState(). Esto es similar a this.state.count y this.setState en una clase, excepto que se obtienen juntos\n\nexport function App() {\n  _s();\n\n  const [todos, setTodos] = useState([{\n    id: 1,\n    task: 'Tarea #1',\n    completed: false\n  }]);\n  const todoTaskRef = useRef();\n\n  const handleTodoAdd = () => {\n    const task = todoTaskRef.current.value;\n    if (task == '') return;\n    setTodos(prevTodos => {\n      return [...prevTodos, {\n        id: uuidv4(),\n        task,\n        completed: false\n      }];\n    });\n    todoTaskRef.current.value = null;\n  };\n\n  const toggleTodo = id => {\n    const newTodos = [...todos];\n    const todo = newTodos.find(todo => todo.id == id);\n    todo.completed = !todo.completed;\n    setTodos(newTodos);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(TodoList, {\n      todos: todos,\n      toggleTodo: toggleTodo\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      ref: todoTaskRef,\n      type: \"text\",\n      placeholder: \"Nueva Tarea\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTodoAdd,\n      children: \"+ Agregar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 25\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"- Eliminar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 25\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 17\n  }, this);\n}\n\n_s(App, \"7vOwKznE4R9typjTVFhx9RvZLFY=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/jesusramirez/ReactJs/tuwebco/src/App.jsx"],"names":["React","Fragment","useState","useRef","v4","uuidv4","TodoList","KEY","App","todos","setTodos","id","task","completed","todoTaskRef","handleTodoAdd","current","value","prevTodos","toggleTodo","newTodos","todo","find"],"mappings":";;;AAAA;AACA,OAAOA,KAAP,IAAcC,QAAd,EAAuBC,QAAvB,EAAgCC,MAAhC,QAA6C,OAA7C,C,CAAsD;;AACtD,SAAQC,EAAE,IAAIC,MAAd,QAA2B,MAA3B;AACA,SAAQC,QAAR,QAAuB,uBAAvB;;AAEA,MAAMC,GAAG,GAAG,eAAZ,C,CAEA;AACA;AACA;;AACA,OAAO,SAASC,GAAT,GAAc;AAAA;;AACb,QAAK,CAACC,KAAD,EAAOC,QAAP,IAAmBR,QAAQ,CAAC,CACzB;AAACS,IAAAA,EAAE,EAAC,CAAJ;AAAMC,IAAAA,IAAI,EAAC,UAAX;AAAsBC,IAAAA,SAAS,EAAC;AAAhC,GADyB,CAAD,CAAhC;AAIC,QAAMC,WAAW,GAAGX,MAAM,EAA1B;;AAEA,QAAMY,aAAa,GAAG,MAAM;AACrB,UAAMH,IAAI,GAAGE,WAAW,CAACE,OAAZ,CAAoBC,KAAjC;AACA,QAAIL,IAAI,IAAI,EAAZ,EAAgB;AAEhBF,IAAAA,QAAQ,CAAEQ,SAAD,IAAgB;AACjB,aAAO,CAAC,GAAIA,SAAL,EAAe;AAACP,QAAAA,EAAE,EAACN,MAAM,EAAV;AAAeO,QAAAA,IAAf;AAAqBC,QAAAA,SAAS,EAAC;AAA/B,OAAf,CAAP;AACP,KAFO,CAAR;AAGRC,IAAAA,WAAW,CAACE,OAAZ,CAAoBC,KAApB,GAA4B,IAA5B;AACC,GARA;;AAUD,QAAME,UAAU,GAAIR,EAAD,IAAQ;AACnB,UAAMS,QAAQ,GAAG,CAAC,GAAGX,KAAJ,CAAjB;AACA,UAAMY,IAAI,GAAGD,QAAQ,CAACE,IAAT,CAAcD,IAAI,IAAIA,IAAI,CAACV,EAAL,IAAWA,EAAjC,CAAb;AACAU,IAAAA,IAAI,CAACR,SAAL,GAAiB,CAACQ,IAAI,CAACR,SAAvB;AACAH,IAAAA,QAAQ,CAACU,QAAD,CAAR;AACP,GALD;;AAOA,sBACQ,QAAC,QAAD;AAAA,4BACQ,QAAC,QAAD;AAAU,MAAA,KAAK,EAAEX,KAAjB;AAAwB,MAAA,UAAU,EAAEU;AAApC;AAAA;AAAA;AAAA;AAAA,YADR,eAEQ;AAAO,MAAA,GAAG,EAAEL,WAAZ;AAAyB,MAAA,IAAI,EAAC,MAA9B;AAAqC,MAAA,WAAW,EAAC;AAAjD;AAAA;AAAA;AAAA;AAAA,YAFR,eAGQ;AAAQ,MAAA,OAAO,EAAEC,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHR,eAIQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAJR;AAAA;AAAA;AAAA;AAAA;AAAA,UADR;AAQP;;GAhCeP,G;;KAAAA,G","sourcesContent":["//import React from 'react';\nimport React,{Fragment,useState,useRef} from 'react'; // x cada cambio fuerza re renderizado\nimport {v4 as uuidv4} from 'uuid';\nimport {TodoList} from './componente/TodoList';\n\nconst KEY = \"todoApp.todos\";\n\n// https://es.reactjs.org/docs/hooks-state.html\n// ¿Qué pasamos a useState como argumento? El único argumento para el Hook useState() es el estado inicial. Al contrario que en las clases, el estado no tiene por qué ser un objeto. Podemos usar números o strings si es todo lo que necesitamos. En nuestro ejemplo, solamente queremos un número para contar el número de clicks del usuario, por eso pasamos 0 como estado inicial a nuestra variable. (Si queremos guardar dos valores distintos en el estado, llamaríamos a useState() dos veces).\n// ¿Qué devuelve useState? Devuelve una pareja de valores: el estado actual y una función que lo actualiza. Por eso escribimos const [count, setCount] = useState(). Esto es similar a this.state.count y this.setState en una clase, excepto que se obtienen juntos\nexport function App(){\n        const[todos,setTodos] = useState([\n                {id:1,task:'Tarea #1',completed:false}, \n         ]);\n\n         const todoTaskRef = useRef();\n\n         const handleTodoAdd = () => {\n                const task = todoTaskRef.current.value;\n                if( task == '') return ;\n\n                setTodos((prevTodos ) => {\n                        return [... prevTodos,{id:uuidv4() , task, completed:false}];\n                });\n        todoTaskRef.current.value = null;\n        };\n\n        const toggleTodo = (id) => {\n                const newTodos = [...todos];\n                const todo = newTodos.find(todo => todo.id == id);\n                todo.completed = !todo.completed;\n                setTodos(newTodos);\n        };\n\n        return (\n                <Fragment>\n                        <TodoList todos={todos} toggleTodo={toggleTodo} />\n                        <input ref={todoTaskRef} type=\"text\" placeholder=\"Nueva Tarea\" />\n                        <button onClick={handleTodoAdd}>+ Agregar</button>\n                        <button>- Eliminar</button>\n                </Fragment>\n        )\n}\n"]},"metadata":{},"sourceType":"module"}